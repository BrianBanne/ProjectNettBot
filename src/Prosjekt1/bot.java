package Prosjekt1;

import java.io.IOException;
import java.net.Socket;
import java.net.URI;
import java.net.UnknownHostException;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;

//will make bot its own client
public class bot {

    private String hostname;
    private int port;
    private String botName;
    private String name;
    private int isbot;

    public bot(String hostname, int port, String name, int isbot) {
        this.hostname = hostname;
        this.port = port;
        this.name = name;
        this.isbot = isbot;
    }

    static int random(int arrlengde) {
        int random;
        return (random = (int) (Math.random()* arrlengde));

    }
    //picks up defenition of a word from urban dictionary
    static String urbandef(String string) {
        //got this code from rapidapi urbandictionary
        // it was autogenerated so no credit to me here
        // but from what i understand this practically the only way to do it since
        // its just a request and a reply from the hosting server.
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("https://mashape-community-urban-dictionary.p.rapidapi.com/define?term="+string))
                .header("x-rapidapi-key", "883af63807msh7012751fa72f9fep15f673jsn9e9b6f6157c3")
                .header("x-rapidapi-host", "mashape-community-urban-dictionary.p.rapidapi.com")
                .method("GET", HttpRequest.BodyPublishers.noBody())
                .build();
        HttpResponse<String> response = null;
        try {
            response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString());
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        //to cut the response to what i wanted i.e. the definition
        // my code here
        string = response.body().toString();
        String hello = string.substring(24, 700);
        //700 cause its seems long enough, but if there are more characters, i can just blame it on the bots memory xD
        String[] hello1 = hello.split(".\",");
        return hello1[0].toString();
    }
    // a bunch of methods for getting name and sentence structures.
     public static String botname() {
        ArrayList<String> list = new ArrayList<String>();
        String[] botnavn = {"Bjarne", "Urbanbot", "Knut", "Lisa", "Jensine", "Stuart", "Anna"};
        for (int i = 0; i < botnavn.length; i++) {
            list.add(botnavn[i]);
        }
         Collections.shuffle(list);
         int navn = random(botnavn.length);
         String temp = botnavn[navn];
         return temp;
    }

    public static boolean findbotname(String string) {
        String [] botnavn = {"Bjarne", "Knut", "Lisa", "Jensine", "Stuart", "Anna", "Urbanbot"};
       for (int i = 0; i < botnavn.length; i++) {
           if (string.equals(botnavn[i])) {
               return true;
           }
       }
       return false;
    }

    public static String responsnegativ() {
        String [] detailnegativearr = {"weird", "idiotic", "ridiculous", "terribly stupid", "horrible", "drastic"};
        int detailneg = random(detailnegativearr.length);
        return  detailnegativearr[detailneg];
    }
    public static String responspositiv() {
        String [] responsadjektivpos = {"super", "wonderful", "fantastic", "idiot-proof", "AMAZING", "great..."};
        int detailpos = random(responsadjektivpos.length);
        return responsadjektivpos[detailpos];
    }
    public static String doablethings() {
        String [] doablethings = {"talking", "licking", "stirring the pot", "make me a baguette", "lusting", "dancing salsa"};
        int randomdoable = random(doablethings.length);
        return doablethings[randomdoable];
    }

    public static String responsquestion() {
        String [] responsquestion = {"what will you do now?", "why would you do that?", "why would you invite that person?", "when should we do that?",
                "where do you suggest to do it?", "why are you looking at me like that?"};
        int question = random(responsquestion.length);
        return responsquestion[question];
    }

    public void exe() {
        try {
            Socket socket = new Socket(hostname, port);

            //sends message to server verifying this is a bot.
          //  DataOutputStream dOut = new DataOutputStream(socket.getOutputStream());
            //dOut.writeByte(1);
            //dOut.writeUTF("This is a bot");
            //dOut.flush();
            //dOut.close();
            System.out.println("Connected to server");

            //start new reader and writer for each connected client

            new ReadThread(socket, null, this).start();
            new WriteThread(socket, null, this).start();

            //catches not finding host and any I/O errors.
        }catch (UnknownHostException i) {
            System.out.println("Server not found: " + i.getMessage());
        }catch (IOException e) {
            System.out.println("Error." +e.getMessage());
        }

    }

        //Stringbuilder for makeing short and long strings with preset content
    static StringBuilder botinnhold() {
        //random generator that hits me with either 0 or 1
        Random ran = new Random();
        int n = ran.nextInt(2);

        StringBuilder respons = new StringBuilder();
/*
        if (n == 0) {
            respons.append(detailnegative+", ");
            respons.append(question);

            //dont need this now, but will leave it for posterity
            if (detailnegative != responsadjektivnegativ[1]) {
                //respons.append(" ");
            }
        }
        else {
            respons.append(detailpositive+ ". ");
            respons.append(question.substring(0,1).toUpperCase() + question.substring(1));
        }
        respons.toString();
        return respons;

 */
        return respons;
    }

    public String getBotNamee() {
        return name;
    }

    public static boolean isbot() {
        if (setisbot() == 1) {
            return true;
        } else return false;
    }
    public static int setisbot() {
        return 1;
    }


    //setter and getter for username hashset


    public static void main(String[] args) {
        //hostname and port must be used in the terminal when executing the program.
        //checks if more than 2 entries are present, if so then dont connect
        // java client hostname portnumber botname
        if (args.length < 3) return;
        String hostname = args[0];
        int port = Integer.parseInt(args[1]);
        String name = args[2];

        //if conditions are met, start client and connect to server with exe
        bot bot = new bot(hostname,port, name, 1);
        bot.exe();

    }

}
